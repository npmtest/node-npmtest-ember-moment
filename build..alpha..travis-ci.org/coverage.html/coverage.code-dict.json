{"/home/travis/build/npmtest/node-npmtest-ember-moment/test.js":"/* istanbul instrument in package npmtest_ember_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-moment/lib.npmtest_ember_moment.js":"/* istanbul instrument in package npmtest_ember_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_moment = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_moment = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-moment/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-moment && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_moment\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_moment.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_moment.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_moment.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_moment.__dirname + '/lib.npmtest_ember_moment.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-moment'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/-base.js":"import computedUnsafe from 'ember-macro-helpers/computed-unsafe';\n\nexport default function computedFactory(fn) {\n  return function(...args) {\n    args.push(function(...vals) {\n      return fn.call(this, vals);\n    });\n\n    return computedUnsafe(...args);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/calendar.js":"import Ember from 'ember';\nimport moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function calendarComputed(params, formatHash = {}) {\n  if (!params || params && params.length > 3) {\n    throw new TypeError('ember-moment: Invalid Number of arguments, at most 3');\n  }\n\n  const [date, referenceTime, formats] = params;\n  const clone = Object.create(formatHash);\n  const mergedFormats = Ember.merge(clone, formats);\n\n  return moment(date).calendar(referenceTime, mergedFormats);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/duration.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function durationComputed(params) {\n  return moment.duration(...params);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/format.js":"import Ember from 'ember';\nimport moment from 'moment';\nimport getOwner from '../utils/get-owner';\n\nimport computedFactory from './-base';\n\nconst CONFIG_KEY = 'config:environment';\nconst { get } = Ember;\n\nexport default computedFactory(function formatComputed([value, optionalFormat]) {\n  if (!optionalFormat) {\n    const owner = getOwner(this);\n\n    if (owner && owner.hasRegistration && owner.hasRegistration(CONFIG_KEY)) {\n      const config = owner.resolveRegistration(CONFIG_KEY);\n\n      if (config) {\n        optionalFormat = get(config, 'moment.outputFormat');\n      }\n    }\n  }\n\n  return moment(value).format(optionalFormat);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/from-now.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function fromNowComputed(params) {\n  let maybeHideSuffix;\n\n  if (params.length > 1) {\n    maybeHideSuffix = params.pop();\n  }\n\n  return moment(...params).fromNow(maybeHideSuffix);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/humanize.js":"import moment from 'moment';\nimport computedFactory from './-base';\n\nexport default computedFactory(function humanizeComputed([duration, suffixless]) {\n  if (!moment.isDuration(duration)) {\n    duration = moment.duration(duration);\n  }\n\n  return duration.humanize(suffixless);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/locale.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function localeComputed([date, locale]) {\n  if (!moment.isDuration(date)) {\n    date = moment(date);\n  }\n\n  return date.locale(locale);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/moment.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function momentComputed(params) {\n  return moment(...params);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/to-now.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function toNowComputed(params) {\n  let maybeHidePrefix;\n\n  if (params.length > 1) {\n    maybeHidePrefix = params.pop();\n  }\n\n  return moment(...params).toNow(maybeHidePrefix);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/computeds/tz.js":"import moment from 'moment';\n\nimport computedFactory from './-base';\n\nexport default computedFactory(function tzComputed([date, tz]) {\n  return moment(date).tz(tz);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/-base.js":"import Ember from 'ember';\n\nconst { observer, inject, get, Helper, run } = Ember;\n\nexport default Helper.extend({\n  moment: inject.service(),\n  disableInterval: false,\n\n  localeOrTimeZoneChanged: observer('moment.locale', 'moment.timeZone', function() {\n    this.recompute();\n  }),\n\n  compute(value, { interval }) {\n    if (get(this, 'disableInterval')) { return; }\n\n    this.clearTimer();\n\n    if (interval) {\n      /*\n       * NOTE: intentionally a setTimeout so tests do not block on it\n       * as the run loop queue is never clear so tests will stay locked waiting\n       * for queue to clear.\n       */\n      this.intervalTimer = setTimeout(() => {\n        run(() => this.recompute());\n      }, parseInt(interval, 10));\n    }\n  },\n\n  morphMoment(time, { locale, timeZone }) {\n    const momentService = get(this, 'moment');\n\n    locale = locale || get(momentService, 'locale');\n    timeZone = timeZone || get(momentService, 'timeZone');\n\n    if (locale && time.locale) {\n      time = time.locale(locale);\n    }\n\n    if (timeZone && time.tz) {\n      time = time.tz(timeZone);\n    }\n\n    return time;\n  },\n\n  clearTimer() {\n    clearTimeout(this.intervalTimer);\n  },\n\n  destroy() {\n    this.clearTimer();\n    this._super(...arguments);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-after.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n    const args = [];\n    const comparisonArgs = [];\n\n    if (length === 1) {\n      comparisonArgs.push(params[0]);\n    } else if (length === 2) {\n      args.push(params[0]);\n      comparisonArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isAfter(...comparisonArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-before.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n    const args = [];\n    const comparisonArgs = [];\n\n    if (length === 1) {\n      comparisonArgs.push(params[0]);\n    } else if (length === 2) {\n      args.push(params[0]);\n      comparisonArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isBefore(...comparisonArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-between.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, inclusivity, locale, timeZone }) {\n    this._super(...arguments);\n\n    const _params = [].concat(params);\n    const { length } = params;\n\n    if (length < 2 || length > 3) {\n      throw new TypeError('ember-moment: Invalid Number of arguments, expected 2 or 3');\n    }\n\n    const args = [];\n\n    if (length > 2) {\n      args.push(_params.shift());\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isBetween(..._params, precision, inclusivity);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-same.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n    const args = [];\n    const comparisonArgs = [];\n\n    if (length === 1) {\n      comparisonArgs.push(params[0]);\n    } else if (length === 2) {\n      args.push(params[0]);\n      comparisonArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isSame(...comparisonArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-same-or-after.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n    const args = [];\n    const comparisonArgs = [];\n\n    if (length === 1) {\n      comparisonArgs.push(params[0]);\n    } else if (length === 2) {\n      args.push(params[0]);\n      comparisonArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isSameOrAfter(...comparisonArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/is-same-or-before.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n    const args = [];\n    const comparisonArgs = [];\n\n    if (length === 1) {\n      comparisonArgs.push(params[0]);\n    } else if (length === 2) {\n      args.push(params[0]);\n      comparisonArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).isSameOrBefore(...comparisonArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-add.js":"import Ember from 'ember';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  moment: Ember.inject.service(),\n\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const moment = this.get('moment');\n    const { length } = params;\n    const args = [];\n    const additionArgs = [];\n\n    if (length === 1) {\n      additionArgs.push(params[0]);\n    } else if (length === 2 && Ember.typeOf(params[0]) === 'number' && Ember.typeOf(params[1]) === 'string') {\n      additionArgs.push(...params);\n    } else {\n      args.push(params[0]);\n      additionArgs.push(...params.slice(1));\n    }\n\n    return this.morphMoment(moment.moment(...args), { locale, timeZone }).add(...additionArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-calendar.js":"import Ember from 'ember';\nimport moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function (params, formatHash = {}) {\n    this._super(...arguments);\n\n    if (!params || params && params.length > 3) {\n      throw new TypeError('ember-moment: Invalid Number of arguments, at most 3');\n    }\n\n    const { locale, timeZone } = formatHash;\n    const [date, referenceTime, formats] = params;\n    const clone = Object.create(formatHash);\n\n    delete clone.locale;\n    delete clone.timeZone;\n\n    const mergedFormats = Ember.merge(clone, formats);\n\n    return this.morphMoment(moment(date), { locale, timeZone }).calendar(referenceTime, mergedFormats);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-duration.js":"import moment from 'moment';\n\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  disableInterval: true,\n\n  compute(params, { locale, timeZone }) {\n    this._super(...arguments);\n\n    if (!params || params && params.length > 2) {\n      throw new TypeError('ember-moment: Invalid Number of arguments, at most 2');\n    }\n\n    return this.morphMoment(moment.duration(...params), { locale, timeZone }).humanize();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-format.js":"import Ember from 'ember';\nimport moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nconst { observer, isEmpty, get } = Ember;\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  defaultFormatDidChange: observer('moment.defaultFormat', function() {\n    this.recompute();\n  }),\n\n  compute: computeFn(function(params, { locale, timeZone }) {\n    this._super(...arguments);\n\n    const { length } = params;\n\n    if (length > 3) {\n      throw new TypeError('ember-moment: Invalid Number of arguments, expected at most 4');\n    }\n\n    const args = [];\n    const formatArgs = [];\n    const defaultFormat = get(this, 'moment.defaultFormat');\n\n    args.push(params[0]);\n\n    if (length === 1 && !isEmpty(defaultFormat)) {\n      formatArgs.push(defaultFormat);\n    } else if (length === 2) {\n      formatArgs.push(params[1]);\n    } else if (length > 2) {\n      args.push(params[2]);\n      formatArgs.push(params[1]);\n    }\n\n    return this.morphMoment(moment(...args), { locale, timeZone }).format(...formatArgs);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-from.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function([ datetime, ...params ], { locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(datetime), { locale, timeZone }).from(...params);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-from-now.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { hideSuffix, locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(...params), { locale, timeZone }).fromNow(hideSuffix);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment.js":"import moment from 'moment';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  compute(params, { locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(...params), { locale, timeZone });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-subtract.js":"import Ember from 'ember';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  moment: Ember.inject.service(),\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { precision, locale, timeZone }) {\n    this._super(...arguments);\n\n    const moment = this.get('moment');\n    const { length } = params;\n    const args = [];\n    const subtractionArgs = [];\n\n    if (length === 1) {\n      subtractionArgs.push(params[0]);\n    } else if (length === 2 && Ember.typeOf(params[0]) === 'number' && Ember.typeOf(params[1]) === 'string') {\n      subtractionArgs.push(...params);\n    } else {\n      args.push(params[0]);\n      subtractionArgs.push(...params.slice(1));\n    }\n\n    return this.morphMoment(moment.moment(...args), { locale, timeZone }).subtract(...subtractionArgs, precision);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-to-date.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { hidePrefix, locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(), { locale, timeZone }).to(...params, hidePrefix);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-to.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function([ datetime, ...params ], { locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(datetime), { locale, timeZone }).to(...params);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/moment-to-now.js":"import moment from 'moment';\n\nimport computeFn from '../utils/helper-compute';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  globalAllowEmpty: false,\n\n  compute: computeFn(function(params, { hidePrefix, locale, timeZone }) {\n    this._super(...arguments);\n\n    return this.morphMoment(moment(...params), { locale, timeZone }).toNow(hidePrefix);\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/now.js":"import moment from 'moment';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  compute() {\n    this._super(...arguments);\n\n    return moment.now();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/helpers/unix.js":"import moment from 'moment';\nimport BaseHelper from './-base';\n\nexport default BaseHelper.extend({\n  compute([unixTimeStamp]) {\n    this._super(...arguments);\n    \n    return moment.unix(unixTimeStamp);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/services/moment.js":"import Ember from 'ember';\nimport moment from 'moment';\n\nconst { computed, get, getProperties, set, Logger:logger } = Ember;\n\nexport default Ember.Service.extend(Ember.Evented, {\n  _timeZone: null,\n\n  locale: null,\n  defaultFormat: null,\n\n  timeZone: computed('_timeZone', {\n    get() {\n      return get(this, '_timeZone');\n    },\n\n    set(propertyKey, timeZone) {\n      if (!moment.tz) {\n        logger.warn('[ember-moment] attempted to set timezone, but moment-timezone is not setup.');\n        return;\n      }\n\n      set(this, '_timeZone', timeZone);\n\n      return timeZone;\n    }\n  }),\n\n  setLocale(locale) {\n    this.changeLocale(locale);\n  },\n\n  changeLocale(locale) {\n    set(this, 'locale', locale);\n    moment.locale(locale);\n    this.trigger('localeChanged', locale);\n  },\n\n  setTimeZone(timeZone) {\n    this.changeTimeZone(timeZone);\n  },\n\n  changeTimeZone(timeZone) {\n    set(this, 'timeZone', timeZone);\n    this.trigger('timeZoneChanged', timeZone);\n  },\n\n  isMoment(obj) {\n    return moment.isMoment(obj);\n  },\n\n  moment() {\n    let momentObj = moment(...arguments);\n    let { locale, timeZone } = getProperties(this, 'locale', 'timeZone');\n\n    if (locale && momentObj.locale) {\n      momentObj = momentObj.locale(locale);\n    }\n\n    if (timeZone && momentObj.tz) {\n      momentObj = momentObj.tz(timeZone);\n    }\n\n    return momentObj;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/utils/get-owner.js":"/* globals require */\n\nimport Ember from 'ember';\n\nlet getOwner = Ember.getOwner;\n\nif (!getOwner) {\n  try {\n    getOwner = require('ember-getowner-polyfill')['default'];\n  }\n  catch(e) {\n    Ember.Logger.warn('Ember.getOwner API unsupported.  To resolve this: `ember install ember-getowner-polyfill`');\n  }\n}\n\nexport default getOwner;\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/addon/utils/helper-compute.js":"import Ember from 'ember';\n\nconst { isBlank, get, Logger: { warn } } = Ember;\n\nexport default function(cb) {\n  return function(params, hash) {\n    if (!params || params && params.length === 0) {\n      throw new TypeError('ember-moment: Invalid Number of arguments, expected at least 1');\n    }\n\n    const datetime = params[0];\n\n    let allowEmpty = hash.allowEmpty || hash['allow-empty'];\n\n    if (allowEmpty === undefined || allowEmpty === null) {\n      allowEmpty = !!get(this, 'globalAllowEmpty');\n    }\n\n    if (isBlank(datetime)) {\n      if (allowEmpty) {\n        return;\n      }\n\n      warn('ember-moment: an empty value (null, undefined, or \"\") was passed to moment-format');\n    }\n\n    return cb.apply(this, arguments);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-after.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsAfterHelper from 'ember-moment/helpers/is-after';\n\nexport default IsAfterHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-before.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsBeforeHelper from 'ember-moment/helpers/is-before';\n\nexport default IsBeforeHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-between.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsBetweenHelper from 'ember-moment/helpers/is-between';\n\nexport default IsBetweenHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-same.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsSameHelper from 'ember-moment/helpers/is-same';\n\nexport default IsSameHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-same-or-after.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsSameOrAfterHelper from 'ember-moment/helpers/is-same-or-after';\n\nexport default IsSameOrAfterHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/is-same-or-before.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport IsSameOrBeforeHelper from 'ember-moment/helpers/is-same-or-before';\n\nexport default IsSameOrBeforeHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-add.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport MomentAddHelper from 'ember-moment/helpers/moment-add';\n\nexport default MomentAddHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-calendar.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport CalendarHelper from 'ember-moment/helpers/moment-calendar';\n\nexport default CalendarHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-duration.js":"export { default } from 'ember-moment/helpers/moment-duration';\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-format.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport FormatHelper from 'ember-moment/helpers/moment-format';\n\nexport default FormatHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-from.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport FromHelper from 'ember-moment/helpers/moment-from';\n\nexport default FromHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-from-now.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport FromNowHelper from 'ember-moment/helpers/moment-from-now';\n\nexport default FromNowHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment.js":"export { default } from 'ember-moment/helpers/moment';\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-subtract.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport MomentSubtractHelper from 'ember-moment/helpers/moment-subtract';\n\nexport default MomentSubtractHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-to-date.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport ToDateHelper from 'ember-moment/helpers/moment-to-date';\n\nexport default ToDateHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-to.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport ToHelper from 'ember-moment/helpers/moment-to';\n\nexport default ToHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-to-now.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport ToNowHelper from 'ember-moment/helpers/moment-to-now';\n\nexport default ToNowHelper.extend({\n  globalAllowEmpty: !!Ember.get(config, 'moment.allowEmpty')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/moment-unix.js":"export { default, unix } from 'ember-moment/helpers/unix';\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/now.js":"export { default } from 'ember-moment/helpers/now';\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/helpers/unix.js":"export { default, unix } from 'ember-moment/helpers/unix';\n","/home/travis/build/npmtest/node-npmtest-ember-moment/node_modules/ember-moment/app/services/moment.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport MomentService from 'ember-moment/services/moment';\n\nexport default MomentService.extend({\n  defaultFormat: Ember.get(config, 'moment.outputFormat')\n});\n"}